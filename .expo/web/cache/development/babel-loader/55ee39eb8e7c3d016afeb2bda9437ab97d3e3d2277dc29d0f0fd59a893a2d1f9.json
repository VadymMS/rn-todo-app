{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/vadymmykhailichenko/Desktop/vadym/projects/educational-projects/react-native/react-native-demo/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { MainLayout } from \"./src/MainLayout\";\nimport { TodoState } from \"./src/context/todo/TodoState\";\nimport { ScreenState } from \"./src/context/screen/ScreenState\";\nfunction loadApplication() {\n  return _regeneratorRuntime.async(function loadApplication$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Font.loadAsync({\n            'roboto-regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n            'roboto-bold': require(\"./assets/fonts/Roboto-Bold.ttf\")\n          }));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isReady = _useState2[0],\n    setIsReady = _useState2[1];\n  if (!isReady) {\n    return React.createElement(AppLoading, {\n      startAsync: loadApplication,\n      onError: function onError(err) {\n        return console.log(err);\n      },\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    });\n  }\n  return React.createElement(ScreenState, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(TodoState, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, React.createElement(MainLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","Font","AppLoading","MainLayout","TodoState","ScreenState","loadApplication","_regeneratorRuntime","async","loadApplication$","_context","prev","next","awrap","loadAsync","require","stop","Promise","App","_useState","_useState2","_slicedToArray","isReady","setIsReady","createElement","startAsync","onError","err","console","log","onFinish","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/vadymmykhailichenko/Desktop/vadym/projects/educational-projects/react-native/react-native-demo/App.js"],"sourcesContent":["import React, {useState} from 'react';\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport {MainLayout} from './src/MainLayout';\nimport {TodoState} from './src/context/todo/TodoState';\nimport {ScreenState} from './src/context/screen/ScreenState';\n\nasync function loadApplication() {\n    await Font.loadAsync({\n        'roboto-regular': require('./assets/fonts/Roboto-Regular.ttf'),\n        'roboto-bold': require('./assets/fonts/Roboto-Bold.ttf'),\n    });\n}\n\nexport default function App() {\n    const [isReady, setIsReady] = useState(false);\n\n    if (!isReady) {\n        return (\n            <AppLoading\n                startAsync={loadApplication}\n                onError={err => console.log(err)}\n                onFinish={() => setIsReady(true)}\n            />\n        );\n    }\n\n    return (\n        <ScreenState>\n            <TodoState>\n                <MainLayout />\n            </TodoState>\n        </ScreenState>\n    );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAOC,UAAU,MAAM,kBAAkB;AACzC,SAAQC,UAAU;AAClB,SAAQC,SAAS;AACjB,SAAQC,WAAW;AAEnB,SAAeC,eAAeA,CAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,iBAAAC,QAAA;IAAA;MAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CACpBZ,IAAI,CAACa,SAAS,CAAC;YACjB,gBAAgB,EAAEC,OAAO,qCAAqC;YAC9D,aAAa,EAAEA,OAAO;UAC1B,CAAC,CAAC;QAAA;QAAA;UAAA,OAAAL,QAAA,CAAAM,IAAA;MAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAGN,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC1B,IAAAC,SAAA,GAA8BnB,QAAQ,CAAC,KAAK,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAI,CAACE,OAAO,EAAE;IACV,OACIvB,KAAA,CAAAyB,aAAA,CAACtB,UAAU;MACPuB,UAAU,EAAEnB,eAAgB;MAC5BoB,OAAO,EAAE,SAAAA,QAAAC,GAAG;QAAA,OAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAAA,CAAC;MACjCG,QAAQ,EAAE,SAAAA,SAAA;QAAA,OAAMP,UAAU,CAAC,IAAI,CAAC;MAAA,CAAC;MAAAQ,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EACnC;EAEV;EAEA,OACIrC,KAAA,CAAAyB,aAAA,CAACnB,WAAW;IAAA0B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACRrC,KAAA,CAAAyB,aAAA,CAACpB,SAAS;IAAA2B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACNrC,KAAA,CAAAyB,aAAA,CAACrB,UAAU;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,CACN,CACF;AAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}